[project]
name = "dlu-afsm"
description = "Simple decorator-based finite state machine library, compatible with attrs and dataclasses."
authors = [
    {name = "Daniele Masato"},
    {name = "Daniele Masato", email = "masato.daniele@gmail.com"}
]
license = {file = "LICENSE"}
readme = "README.rst"
keywords = [
    "finite state machine",
    "decorator",
    "attrs",
    "dataclass",
]
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
]
requires-python = ">= 3.8"
dependencies = []
dynamic = ["version"]

[build-system]
## Use PDM-Backend (Python Dependency Master) as the build system, see https://pdm-backend.fming.dev/
## For configuration details, see https://pdm-backend.fming.dev/build_config/
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.version]
source = "file"
path = "src/afsm/__init__.py"

[tool.pdm.dev-dependencies]
## Use PDM for dependency management, see https://pdm.fming.dev/
## For configuration details, see https://pdm.fming.dev/latest/usage/dependency/

# Base development dependencies
base = [
    "pre-commit>=2.20.0",
    "pre-commit-hooks>=4.4",
]

# Code qaulity dependencies, pre-commit uses these to perform code checks before a commit or a push
qa = [
    "rstcheck>=6.1",
    "black>=22.1",
    "blacken-docs>=1.12",
    "isort>=5.0",
    "pylint>=2.15",
    "mypy>=0",
    "bandit[toml]>=1.7",
    "wily>=1.24",
    "pip-audit>=2.4",
]

# Test dependencies, tox uses these to test the package under different Python environments
test = [
    "pytest>=7.2",
    "pytest-mock>=3.10",
    "coverage>=7.0",
    "attrs>=21",  # Modern attrs APIs, see https://www.attrs.org/en/stable/names.html
]

# Continuous integration dependencies, pre-committ uses these to perform code validation before a push
ci = [
    "tox>=4.0.10",
    "tox-pdm",  # tox plugin to delegate dependency management to PDM
]

[tool.pdm.resolution.overrides]
radon = ">=5.1"

[tool.black]
## Use black for automated code formatting, see https://black.readthedocs.io/
## For configuration details, see https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html
target-version = ["py38"]
line-length = 120

[tool.isort]
## Use isort for automated, alphabetical import sorting by type, see https://pycqa.github.io/isort/
## For configuration details, see https://pycqa.github.io/isort/docs/configuration/options.html
py_version = 38
line_length = 120
known_first_party = ["afsm"]
combine_as_imports = true
skip_gitignore = true
# Ensure compatibility with black, see https://pycqa.github.io/isort/docs/configuration/black_compatibility.html
profile = "black"

[tool.pylint.main]
## Use Pylint for static code analysis and coding style validation, see https://pylint.pycqa.org
## For configuration details, see https://pylint.pycqa.org/en/latest/user_guide/checkers/features.html
## This configuration follows recommendations in https://pythonspeed.com/articles/pylint
py-version = "3.8"

[tool.pylint.format]
max-line-length = 120
max-module-lines = 500
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$|# type: ignore(\\[.+\\])?$"

[tool.pylint.imports]
allow-wildcard-with-all = false

[tool.pylint.design]
min-public-methods = 1

[tool.pylint.reports]
evaluation = "10.0 * max(0, 1.0 - (5.0 * error + 2.0 * warning + refactor + convention) / statement)"

[tool.pylint.logging]
enable = ["useless-suppression"]

[tool.mypy]
## Use mypy for static code type-checking on type-annotated code, see https://mypy.readthedocs.io
## For configuration details, see https://mypy.readthedocs.io/en/latest/config_file.html
python_version = "3.8"
mypy_path = ["src", "tests"]
namespace_packages = false
show_error_codes = true
strict = true

[[tool.mypy.overrides]]
module = "afsm.*"

[[tool.mypy.overrides]]
module = "test_afsm.*"

[tool.bandit]
exclude_dirs = ["tests"]

[tool.pytest.ini_options]
## Use pytest for scalable and readable testing, see https://docs.pytest.org/
## For configuration details, see https://docs.pytest.org/en/latest/reference/customize.html
testpaths = ["tests"]
console_output_style = "count"
python_functions = "*_succeeds *_fails returns_* raises_* calls_*"

[tool.coverage.run]
## Use Coverage.py to measure code coverage, see https://coverage.readthedocs.io/
## For configuration details, see https://coverage.readthedocs.io/en/latest/config.html
source = ["afsm"]
branch = true
parallel = true
data_file = ".coverage_cache/data"

[tool.coverage.paths]
# Map different coverage report paths, generated for each tox test environment, to the same paths in the source tree.
# Without this, the combined report shows coverage for each environment, instead of aggregates over all environments.
source_map = ["src/afsm/", "**/afsm/"]

[tool.coverage.report]
show_missing = true
skip_empty = true
sort = "cover"
fail_under = 90
exclude_lines = ["pragma: not covered", "@overload"]

[tool.tox]
## Use tox to automate testing with different versions and implementations of Python, see https://tox.wiki/
## For configuration details, see https://tox.wiki/en/latest/config.html
legacy_tox_ini = """
    [tox]
    skip_missing_interpreters = true
    env_list =
        clean
        py{38,39,310,311,py3}
        report

    [testenv]
    groups = test  # Install dependencies from PDM's test dependency group

    [testenv:clean]
    description = Clean coverage report
    skip_install = true
    commands = coverage erase

    [testenv:py{38,39,310,311,py3}]
    description = Run tests for {py_impl}-{py_dot_ver}
    depends = clean
    commands = coverage run --parallel-mode --module pytest --import-mode=importlib tests

    [testenv:report]
    description = Generate coverage report
    depends = py{38,39,310,311,py3}
    skip_install = true
    parallel_show_output = true
    commands =
        coverage combine --quiet
        coverage report --show-missing
"""
